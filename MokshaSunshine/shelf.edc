
/////////////////////////////////////////////////////////////////////////////
/*** SHELF ***/

   /* Shelves are "panels" that  are placed around the edges of the screen
    * to hold useful gadgets to control things - like switch desktops
    * (the pager module and its gadget), launch programs, and anything else
    * someone wants to put in there. The way to add gadgets to a shelf is to
    * write a module that places a gadget there. This means that it might end
    * up containing all sorts of things and the artist needs to be aware of
    * that and make sure the shelf border and background etc. won't interfere
    * with all manner of things that may get placed there */
  
   /* This is put around gadgets in the shelf if they ask for an "inset" style
    * framing. This puts some sort of bordering around them to make them look
    * "inset" into the shelf or screen. this is meant to go with the default
    * shelf style as implied in the group name */
   group {
      name: "e/shelf/default/inset";
      alias: "e/shelf/alternate/inset";
     
      images {
         image: "shelf_inset.png" COMP;
      }
      parts {
         part {
            name: "base";
            type: IMAGE;
            description {
               state: "default" 0.0;
               rel1 {
                  offset: 1 1;
               }
               rel2 {
                  offset: -2 -2;
               }
               color: 255 255 255 255;
               image.normal: "shelf_inset.png";
               image.border: 7 7 7 7;
            }
         }
         part {
            name: "clip";
            type: RECT;
            description {
               state: "default" 0.0;
               rel1.to: "base";
               rel2.to: "base";
               color: 255 255 255 255;
            }
         }
         part {
            name: "e.swallow.content";
            type: SWALLOW;
            clip_to: "clip";
            description {
               state: "default" 0.0;
               rel1 {
                  to: "base";
                  offset: 2 3;
               }
               rel2 {
                  to: "base";
                  offset: -2 -3;
               }
            }
         }
         /*part {
            name: "inset";
            type: RECT;
            mouse_events: 0;
            description {
				color: 255 255 255 0;
               state: "default" 0.0;
               rel1.offset: 1 1;
               rel2.offset: -2 -2;
            }
         }*/
      }
      programs {
         // tell us what oriantation we are in. not used here
         //      program { name: "xx";
         //    signal: "e,state,orientation,top";
         //    source: "e";
         //      }
         // tell us what oriantation we are in. not used here
         //      program { name: "xx";
         //    signal: "e,state,orientation,top_left";
         //    source: "e";
         //      }
         // tell us what oriantation we are in. not used here
         //      program { name: "xx";
         //    signal: "e,state,orientation,top_right";
         //    source: "e";
         //      }
         // tell us what oriantation we are in. not used here
         //      program { name: "xx";
         //    signal: "e,state,orientation,bottom";
         //    source: "e";
         //      }
         // tell us what oriantation we are in. not used here
         //      program { name: "xx";
         //    signal: "e,state,orientation,bottom_left";
         //    source: "e";
         //      }
         // tell us what oriantation we are in. not used here
         //      program { name: "xx";
         //    signal: "e,state,orientation,bottom_right";
         //    source: "e";
         //      }
         // tell us what oriantation we are in. not used here
         //      program { name: "xx";
         //    signal: "e,state,orientation,left";
         //    source: "e";
         //      }
         // tell us what oriantation we are in. not used here
         //      program { name: "xx";
         //    signal: "e,state,orientation,left_top";
         //    source: "e";
         //      }
         // tell us what oriantation we are in. not used here
         //      program { name: "xx";
         //    signal: "e,state,orientation,left_bottom";
         //    source: "e";
         //      }
         // tell us what oriantation we are in. not used here
         //      program { name: "xx";
         //    signal: "e,state,orientation,right";
         //    source: "e";
         //      }
         // tell us what oriantation we are in. not used here
         //      program { name: "xx";
         //    signal: "e,state,orientation,right_top";
         //    source: "e";
         //      }
         // tell us what oriantation we are in. not used here
         //      program { name: "xx";
         //    signal: "e,state,orientation,right_bottom";
         //    source: "e";
         //      }
      }
   }
   /* Same as inset, but meant to be with no decorations that are visible. here
    * we simply make the content swallow inset a bit from the edges to align
    * with any plain style inset boxes */
   group {
      name: "e/shelf/default/plain";
      alias: "e/shelf/alternate/plain";
      parts {
         part {
            name: "clip";
            type: RECT;
            description {
               state: "default" 0.0;
               color: 255 255 255 255;
            }
         }
         part {
            name: "e.swallow.content";
            type: SWALLOW;
            clip_to: "clip";
            description {
               state: "default" 0.0;
               rel1.offset: 0 0;
               rel2.offset: 0 0;
            }
         }
      }
   }
   /* This is the "invisible" shelf. Yes. Even it has visual config in edje.
    * The idea is that it will remain invisible, BUT will allow the designer
    * to do some layout and padding. This gets the same signals as the
    * default shelf and can provide the same data items */
   group {
      name: "e/shelf/invisible/base";
      //data.item: "shaped" "1";
      parts {
         part {
            name: "e.swallow.content";
            type: SWALLOW;
            description {
               state: "default" 0.0;
               rel1 {
                  relative: 0.0 0.0;
                  offset: 0 0;
               }
               rel2 {
                  relative: 1.0 1.0;
                  offset: -1 -1;
               }
            }
         }
      }
   }


   group {
      name: "e/shelf/invisible/plain";
      alias: "e/shelf/invisible/inset";
      parts {
         part {
            name: "clip";
            type: RECT;
            description {
               state: "default" 0.0;
               color: 255 255 255 255;
            }
         }
         part {
            name: "e.swallow.content";
            type: SWALLOW;
            clip_to: "clip";
            description {
               state: "default" 0.0;
               rel1.offset: 1 1;
               rel2.offset: -2 -2;
            }
         }
      }
   }
   
#define BASE_ORIENT(POS, IMG)							\
description {	state: POS 0.0;							\
				inherit: "default" 0.0;					\
				image.normal: IMG;						\
            }

#define ORIENT(POS, OFF1, OFF2)							\
description {	state: POS 0.0; 						\
				inherit: "default" 0.0; 				\
				rel1.relative: 0.01 0.01;				\
				rel2.relative: 0.99 0.99;				\
				rel1.offset: OFF1; 						\
				rel2.offset: OFF2;						\
            }

#define ORIENT_PROGRAM(POS)								\
program { name: POS; 									\
          signal: "e,state,orientation,"POS; 			\
          source: "e"; 									\
          action: STATE_SET POS 0.0; 					\
          target: "base"; 								\
          target: "e.swallow.content"; 					\
        } 

//Shelf has rounded border, panel doesn't
#define SHELF(NAME, IMAGE_TOP, IMAGE_LEFT, IMAGE_RIGHT, IMAGE_BOTTOM)  									\
   group {														\
      name: NAME; 												\
      images {													\
		  image: IMAGE_TOP COMP;								\
		  image: IMAGE_LEFT COMP;								\
		  image: IMAGE_RIGHT COMP;								\
		  image: IMAGE_BOTTOM COMP;								\
	  }															\
      parts { 													\
         part { 												\
            name: "base"; mouse_events:0;										\
            description { 										\
               state: "default" 0.0; 							\
               color_class: "shelf_base"; 						\
               image.normal: IMAGE_BOTTOM;						\
               image.border: 10 10 10 10;						\
               fill.smooth: 0; 									\
            } 													\
            BASE_ORIENT("left", IMAGE_LEFT)						\
            BASE_ORIENT("left_top", IMAGE_LEFT)					\
            BASE_ORIENT("left_bottom", IMAGE_LEFT)				\
            BASE_ORIENT("right", IMAGE_RIGHT)					\
			BASE_ORIENT("right_top", IMAGE_RIGHT)				\
			BASE_ORIENT("right_bottom", IMAGE_RIGHT)			\
			BASE_ORIENT("top", IMAGE_TOP)						\
			BASE_ORIENT("top_left", IMAGE_TOP)					\
			BASE_ORIENT("top_right", IMAGE_TOP)					\
			BASE_ORIENT("bottom", IMAGE_BOTTOM)					\
			BASE_ORIENT("bottom_left", IMAGE_BOTTOM)			\
			BASE_ORIENT("bottom_right", IMAGE_BOTTOM)			\
         } 														\
         part {													\
            name: "e.swallow.content"; 							\
            type: SWALLOW; 										\
            description { 										\
               state: "default" 0.0; 							\
		   }													\
			ORIENT("left", 1 1, 0 0)							\
		   ORIENT("left_top", 1 0, 0 0)							\
		   ORIENT("left_bottom", 1 0, 0 0)						\
		   ORIENT("right", 0 1, 0 0)							\
		   ORIENT("right_top", 0 1, 0 0)						\
		   ORIENT("right_bottom", 0 1, 0 0)						\
		   ORIENT("top", 1 1, 0 0)								\
		   ORIENT("top_left", 1 1,  0 0)						\
		   ORIENT("top_right", 1 1, 0 0 )						\
		   ORIENT("bottom", 1 0, 0 0 )							\
		   ORIENT("bottom_left", 1 0, 0 0)						\
		   ORIENT("bottom_right", 1 0, 0 -1)					\
         } 													\
      } 														\
      programs { 												\
		ORIENT_PROGRAM("left")									\
		ORIENT_PROGRAM("left_top")								\
		ORIENT_PROGRAM("left_bottom")							\
		ORIENT_PROGRAM("right")									\
		ORIENT_PROGRAM("right_top")								\
		ORIENT_PROGRAM("right_bottom")							\
		ORIENT_PROGRAM("top")									\
		ORIENT_PROGRAM("top_left")								\
		ORIENT_PROGRAM("top_right")								\
		ORIENT_PROGRAM("bottom")								\
		ORIENT_PROGRAM("bottom_left")							\
		ORIENT_PROGRAM("bottom_right")							\
      } 														\
   }
   
#define PANEL(NAME, IMAGE_TOP, IMAGE_LEFT, IMAGE_RIGHT, IMAGE_BOTTOM)  									\
   group {														\
      name: NAME; 												\
      data.item: "hidden_state_size" RADCONF_SHELF_HID_SIZE;	\
      images {													\
		  image: IMAGE_TOP COMP;								\
		  image: IMAGE_LEFT COMP;								\
		  image: IMAGE_RIGHT COMP;								\
		  image: IMAGE_BOTTOM COMP;								\
	  }															\
      parts { 													\
         part { 												\
            name: "base";	 									\
            description { 										\
               state: "default" 0.0; 							\
               color_class: "shelf_base"; 						\
               image.normal: IMAGE_BOTTOM;						\
               image.border: 2 2 2 2;							\
               fill.smooth: 0; 									\
            } 													\
            BASE_ORIENT("left", IMAGE_LEFT)						\
            BASE_ORIENT("left_top", IMAGE_LEFT)					\
            BASE_ORIENT("left_bottom", IMAGE_LEFT)				\
            BASE_ORIENT("right", IMAGE_RIGHT)					\
			BASE_ORIENT("right_top", IMAGE_RIGHT)				\
			BASE_ORIENT("right_bottom", IMAGE_RIGHT)			\
			BASE_ORIENT("top", IMAGE_TOP)						\
			BASE_ORIENT("top_left", IMAGE_TOP)					\
			BASE_ORIENT("top_right", IMAGE_TOP)					\
			BASE_ORIENT("bottom", IMAGE_BOTTOM)					\
			BASE_ORIENT("bottom_left", IMAGE_BOTTOM)			\
			BASE_ORIENT("bottom_right", IMAGE_BOTTOM)			\
         } 														\
         part {													\
            name: "e.swallow.content"; 							\
            type: SWALLOW; 										\
            description { 										\
               state: "default" 0.0; 							\
		   }													\
		   ORIENT("left", 1 1, 0 0)							\
		   ORIENT("left_top", 1 0, 0 0)						\
		   ORIENT("left_bottom", 1 0, 0 0)						\
		   ORIENT("right", 0 1, 0 0)							\
		   ORIENT("right_top", 0 1, 0 0)						\
		   ORIENT("right_bottom", 0 1, 0 0)						\
		   ORIENT("top", 1 1, 0 0)								\
		   ORIENT("top_left", 1 1,  0 0)						\
		   ORIENT("top_right", 1 1, 0 0 )						\
		   ORIENT("bottom", 1 0, 0 0 )							\
		   ORIENT("bottom_left", 1 0, 0 0)						\
		   ORIENT("bottom_right", 1 0, 0 -1)					\
         } 														\
      } 														\
      programs { 												\
		ORIENT_PROGRAM("left")									\
		ORIENT_PROGRAM("left_top")								\
		ORIENT_PROGRAM("left_bottom")							\
		ORIENT_PROGRAM("right")									\
		ORIENT_PROGRAM("right_top")								\
		ORIENT_PROGRAM("right_bottom")							\
		ORIENT_PROGRAM("top")									\
		ORIENT_PROGRAM("top_left")								\
		ORIENT_PROGRAM("top_right")								\
		ORIENT_PROGRAM("bottom")								\
		ORIENT_PROGRAM("bottom_left")							\
		ORIENT_PROGRAM("bottom_right")							\
      } 														\
   }   
   
SHELF("e/shelf/default/base", "shelf_bg_top.png", "shelf_bg_left.png", "shelf_bg_right.png", "shelf_bg.png")
//SHELF("e/shelf/engage/base", "itask_im1.png", "itask_im2.png", "itask_im3.png", "itask_im0.png")
PANEL("e/shelf/squared/base", "shelf_bgs_top.png", "shelf_bgs_left.png", "shelf_bgs_right.png", "shelf_bgs.png")


	group { name: "e/shelf/alternate/base";
		data {
			/* this tells e the number of pixels of the shelf to leave "exposed"
			 * when auto-hiding the shelf */
			item: "hidden_state_size" RADCONF_SHELF_HID_SIZE;
			/* This makes the border hide instantly after the given amount of
			 * seconds - in this case 3 seconds. This means there will be no
			 * visible part of the shelf after this time at all as it will be
			 * totally hidden */
//			item: "instant_delay" "3.0";
		}
		images {
			image: "shelf_bga.png" COMP;
			image: "shelf_bga_top.png" COMP;
			image: "shelf_bga_left.png" COMP;
			image: "shelf_bga_right.png" COMP;
		}
		parts {
			part { name: "base";
				mouse_events: 0;
				description { state: "default" 0.0;
					color_class: "shelf_base";
					image.normal: "shelf_bga.png";
					image.border: 2 2 2 2;
					fill {
						size {
							relative: 0 0;
							offset: 8 100;
						}
						smooth: 0;
					}
				}
				description { state: "top" 0.0;
					inherit: "default" 0.0;
					image.normal: "shelf_bga_top.png";
				}
				description { state: "left" 0.0;
					inherit: "default" 0.0;
					image.normal: "shelf_bga_left.png";
				}
				description { state: "right" 0.0;
					inherit: "default" 0.0;
					image.normal: "shelf_bga_right.png";
				}
			}
			part { name: "e.swallow.content";
				type: SWALLOW;
				description { state: "default" 0.0;
					rel1 {
						relative: 0.0 0.0;
						offset: 2 2;
					}
					rel2 {
						relative: 1.0 1.0;
						offset: -3 -3;
					}
				}
				description { state: "top" 0.0;
					inherit: "default" 0.0;
				}
				description { state: "left" 0.0;
					inherit: "default" 0.0;
				}
				description { state: "right" 0.0;
					inherit: "default" 0.0;
				}
			}
		}
		programs {
			program { name: "orient1";
				signal: "e,state,orientation,bottom";
				source: "e";
				action: STATE_SET "default" 0.0;
				target: "base";
				target: "e.swallow.content";
			}
			program { name: "orient2";
				signal: "e,state,orientation,bottom_left";
				source: "e";
				action: STATE_SET "default" 0.0;
				target: "base";
				target: "e.swallow.content";
			}
			program { name: "orient3";
				signal: "e,state,orientation,bottom_right";
				source: "e";
				action: STATE_SET "default" 0.0;
				target: "base";
				target: "e.swallow.content";
			}
			program { name: "orient4";
				signal: "e,state,orientation,top";
				source: "e";
				action: STATE_SET "top" 0.0;
				target: "base";
				target: "e.swallow.content";
			}
			program { name: "orient5";
				signal: "e,state,orientation,top_left";
				source: "e";
				action: STATE_SET "top" 0.0;
				target: "base";
				target: "e.swallow.content";
			}
			program { name: "orient6";
				signal: "e,state,orientation,top_right";
				source: "e";
				action: STATE_SET "top" 0.0;
				target: "base";
				target: "e.swallow.content";
			}
			program { name: "orient7";
				signal: "e,state,orientation,left";
				source: "e";
				action: STATE_SET "left" 0.0;
				target: "base";
				target: "e.swallow.content";
			}
			program { name: "orient8";
				signal: "e,state,orientation,left_top";
				source: "e";
				action: STATE_SET "left" 0.0;
				target: "base";
				target: "e.swallow.content";
			}
			program { name: "orient9";
				signal: "e,state,orientation,left_bottom";
				source: "e";
				action: STATE_SET "left" 0.0;
				target: "base";
				target: "e.swallow.content";
			}
			program { name: "orient10";
				signal: "e,state,orientation,right";
				source: "e";
				action: STATE_SET "right" 0.0;
				target: "base";
				target: "e.swallow.content";
			}
			program { name: "orient11";
				signal: "e,state,orientation,right_top";
				source: "e";
				action: STATE_SET "right" 0.0;
				target: "base";
				target: "e.swallow.content";
			}
			program { name: "orient12";
				signal: "e,state,orientation,right_bottom";
				source: "e";
				action: STATE_SET "right" 0.0;
				target: "base";
				target: "e.swallow.content";
			}
		}
	}

	group { name: "e/shelf/alternate/plain";
		parts {
			part { name: "clip";
				type: RECT;
				description { state: "default" 0.0;
					color: 255 255 255 255;
				}
			}
			part { name: "e.swallow.content";
				type: SWALLOW;
				clip_to: "clip";
				description { state: "default" 0.0;
					rel1.offset: 1 1;
					rel2.offset: -2 -2;
				}
			}
		}
	}

	group { name: "e/shelf/alternate/inset";
		images {
			image: "shelf_invisible_inset.png" COMP;
		}
		parts {
			part { name: "background";
				type: IMAGE;
				mouse_events: 0;
				description { state: "default" 0.0;
					image {
						normal: "shelf_invisible_inset.png";
						border: 8 8 10 10;
					}
					fill.smooth: 0;
				}
			}
			part { name: "items_clip";
				type: RECT;
				mouse_events: 0;
				description { state: "default" 0.0;
					color: 255 255 255 255;
					rel1 { 
						to: "background"; 
						relative: 0.0 0.0; 
						offset: 3 4; 
					}
					rel2 { 
						to: "background"; 
						relative: 1.0 1.0; 
						offset: -6 -4; 
					}
				}
			}
			part { name: "e.swallow.content";
				type: SWALLOW;
				clip_to: "items_clip";
				description { state: "default" 0.0;
					rel1.to: "items_clip";
					rel2.to: "items_clip"; 
				}
			}
		}
	}
